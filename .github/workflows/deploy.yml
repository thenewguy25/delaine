name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: bcmath, ctype, curl, dom, fileinfo, json, mbstring, openssl, pdo, tokenizer, xml

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader --no-dev

      - name: Install NPM dependencies
        run: npm ci

      - name: Build frontend assets
        run: npm run build

      - name: Create deployment package
        run: |
          # Create a clean copy of the project for packaging
          mkdir -p /tmp/delaine-deploy
          cp -r . /tmp/delaine-deploy/
          cd /tmp/delaine-deploy

          # Remove unnecessary files
          rm -rf .git node_modules tests .github docker-compose.yml Dockerfile .env.example

          # Create the package
          tar -czf delaine-staging.tar.gz .

          # Move package back to workspace
          mv delaine-staging.tar.gz ${{ github.workspace }}/

      - name: Deploy to staging server
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example:
          # scp delaine-staging.tar.gz user@staging-server:/var/www/
          # ssh user@staging-server "cd /var/www && tar -xzf delaine-staging.tar.gz && php artisan migrate --force && php artisan config:cache"

      - name: Cleanup temporary files
        if: always()
        run: |
          rm -rf /tmp/delaine-deploy
          rm -f delaine-staging.tar.gz

      - name: Run post-deployment tests
        run: |
          echo "üß™ Running post-deployment health checks..."
          # Add health check commands here
          # Example: curl -f https://staging.delaine.com/health

      - name: Notify deployment success
        run: |
          echo "‚úÖ Successfully deployed to staging!"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: bcmath, ctype, curl, dom, fileinfo, json, mbstring, openssl, pdo, tokenizer, xml

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader --no-dev

      - name: Install NPM dependencies
        run: npm ci

      - name: Build frontend assets
        run: npm run build

      - name: Create deployment package
        run: |
          # Create a clean copy of the project for packaging
          mkdir -p /tmp/delaine-deploy-prod
          cp -r . /tmp/delaine-deploy-prod/
          cd /tmp/delaine-deploy-prod

          # Remove unnecessary files
          rm -rf .git node_modules tests .github docker-compose.yml Dockerfile .env.example

          # Create the package
          tar -czf delaine-production.tar.gz .

          # Move package back to workspace
          mv delaine-production.tar.gz ${{ github.workspace }}/

      - name: Create backup
        run: |
          echo "üì¶ Creating backup before deployment..."
          # Add backup commands here
          # Example: ssh user@prod-server "cd /var/www && tar -czf backup-$(date +%Y%m%d-%H%M%S).tar.gz ."

      - name: Deploy to production server
        run: |
          echo "üöÄ Deploying to production environment..."
          # Add your production deployment commands here
          # Example:
          # scp delaine-production.tar.gz user@prod-server:/var/www/
          # ssh user@prod-server "cd /var/www && tar -xzf delaine-production.tar.gz && php artisan migrate --force && php artisan config:cache && php artisan queue:restart"

      - name: Cleanup temporary files
        if: always()
        run: |
          rm -rf /tmp/delaine-deploy-prod
          rm -f delaine-production.tar.gz

      - name: Run post-deployment tests
        run: |
          echo "üß™ Running post-deployment health checks..."
          # Add health check commands here
          # Example: curl -f https://delaine.com/health

      - name: Notify deployment success
        run: |
          echo "‚úÖ Successfully deployed to production!"

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()

    steps:
      - name: Rollback to previous version
        run: |
          echo "üîÑ Rolling back deployment..."
          # Add rollback commands here
          # Example: ssh user@server "cd /var/www && tar -xzf backup-*.tar.gz"

      - name: Notify rollback
        run: |
          echo "‚ö†Ô∏è Deployment rolled back due to failure"
